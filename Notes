Input:
Anand,Ramesh,Kiran
12,11,10
Ramesh

Output:
Ramesh,16.0
Anand,12.0
Kiran,10.0


---------------------------------------------------
names=input().split(",")
scores=input().split(",")
x=input().split(",")
scores_1=[float(i) for i in scores]
d={names[i]:scores_1[i] for i in range(len(names))}
for i in x:
    if i in d:
        d[i]=d[i]+5
    else:
        d.update({i:5.0})
d=sorted(d.items(),reverse=True)
d1=sorted(d,key=lambda v:v[1],reverse=True)
for k,v in d1:
    print(k,v,sep=",")

-------------------------
//// matrix
r,c=map(int,input().split(","))
l=input().split(",")
l=[float(i) for i in l]
r1=[]
c1=[]
a=0
for i in range(r):
    for j in range(c):
        r1.append(l[a])
        a=a+1
    c1.append(r1)
    r1=[]
print(c1)
----------------------------------
add two polynomials
x=int(input())
l1=[]
l2=[]
for i in range(x):
    a,b=map(int,input().split())
    l1.append(a)
    l2.append(b)

y=int(input())
l3=[]
l4=[]
for i in range(y):
    c,d=map(int,input().split())
    l3.append(c)
    l4.append(d)
    
    
k=[]
d={l1[i]:l2[i] for i in range(x)}

d1={l3[i]:l4[i] for i in range(y)}

for i,j in d.items():
    for m,n in d1.items():
        if i==m:
            s=d[i]+d1[m]
            k.append(s)
    else:
        if i>m:
            k.append(d[i])
            
k.reverse()
print(k)
s=k.count(0)
if s==len(k):
    print(0)
else:
    n=3
    for i in k:
         print(str(i)+"x^"+str(l1[n])+" + ",end="")
         n=n-1
 ------------------------------------------------
ostfix
x = input().split()
a=[]
for i in range(len(x)):
    if x[i].isdigit():
        a.append(x[i])
    if x[i]=="+":
        n1=a.pop()
        n2=a.pop()
        a.append(int(n1)+int(n2))
    if x[i]=="-":
        n1=a.pop()
        n2=a.pop()
        a.append(int(n2)-int(n1))
    if x[i]=="*":
        n1=a.pop()
        n2=a.pop()
        a.append(int(n1)*int(n2))
    if x[i]=="/":
        n1=a.pop()
        n2=a.pop()
        a.append(int(n2)/int(n1))
print(int(a[0]))
------------------------------------------
def compute_fib(n,l):
    return l[n-1]%100
 
    
n = int(input())
l=[]
for i in range(1000):
    if i<=1:
        l.append(1)
    else:
        l.append(l[i-1]+l[i-2])
       
for i in range(n):
    print(compute_fib(int(input()),l))
------------------------------------------
table

Input:
2
Sumanth,12,13,14
Gopi,23,24,25

Output:
+-------------------------+----+----+----+
| Student                 |  M |  P |  C |
+-------------------------+----+----+----+
| Sumanth                 | 12 | 13 | 14 |
| Gopi                    | 23 | 24 | 25 |
+-------------------------+----+----+----+
x=int(input())
print("+"+"-"*25+"+"+"-"*4+"+"+"-"*4+"+"+"-"*4+"+")
print("| {:<24}".format("Student")+"|"+"{:>4}".format("M ")+"|"+"{:>4}".format("P ")+"|"+"{:>4}".format("C ")+"|")
print("+"+"-"*25+"+"+"-"*4+"+"+"-"*4+"+"+"-"*4+"+")

for i in range(x):
    a,b,c,d=input().split(",")
    print("| {:<24}".format(a)+"|"+"{:>3}".format(b)+" |"+"{:>3}".format(c)+" |"+"{:>3}".format(d)+" |")
print("+"+"-"*25+"+"+"-"*4+"+"+"-"*4+"+"+"-"*4+"+")
------------------------------------------------------------
prime no
Input:
2
20
10

Output:
2 3 5 7 11 13 17 19
2 3 5 7
def primes(n):
    c=0
    l=[]
    for i in range(2,n+1):
        c=0
        for j in range(1,i+1):
            if i%j==0:
                c=c+1
        if c==2:
            l.append(i)
    for i in range(len(l)):
        if i!=len(l)-1:
            print(l[i],end=" ")
        else:
            print(l[i],end="")
    print('')   
t = int(input())

for t_ in range(t):
    t1 = int(input())
    primes(t1)

----------------------------------------------------
Input:
Ram,Naresh,Haran,Raghu
12,13,14,15
Ram,Naresh,Haran
23,24,25
Naresh,Haran,Raghu
34,35,36
14,5,6

Output:
Haran,Naresh,Raghu,Ram
Haran
m_names = input().split(",")
m_scores = input().split(",")
p_names = input().split(",")
p_scores = input().split(",")
c_names = input().split(",")
c_scores = input().split(",")
t_scores =input().split(",")

t_scores1=[int(i) for i in t_scores]
c=1
l_m=[];l_p=[];l_c=[];
for i in range(len(m_scores)):
    if int(m_scores[i])>=t_scores1[0]:
        c=0
        l_m.append(m_names[i])
for i in range(len(p_scores)):
    if int(p_scores[i])>=t_scores1[1]:
        l_p.append(p_names[i])
        c=0
for i in range(len(c_scores)):
    if int(c_scores[i])>=t_scores1[2]:
        c=0
        l_c.append(c_names[i])

k=set(l_m) |set(l_p)  |set(l_c)
k=list(k)
k=sorted(k)
k1=set(l_m) & set(l_p)  & set(l_c)
k1=list(k1)
k1=sorted(k1)
m=0
if c==0:
    for i in range(len(k)):
        if i!=len(k)-1:
            print(k[i],end=",")
        else:
            print(k[i],end="")
    print()
    for i in range(len(k1)):
        if i!=len(k1)-1:
            m=1
            print(k1[i],end=",")
        else:
            m=1
            print(k1[i],end="")
        print()
    if m==0:
        print("No Students")
if c==1:
    print("No Students")
    print("No Students")
----------------------
def get_result(a, b, operation):
    # update operation_dict
    operation_dict = {"ADD":add,"SUBTRACT":subtract,"MULTIPLY":multiply,"DIVIDE":divide}

    func = operation_dict[operation]

    result = func(a, b)

    print(round(result,2))


def add(a, b):
    return a+b


def subtract(a, b):
    return a-b


def multiply(a, b):
    return a*b


def divide(a, b):
    return a/b


a, b = input().split(",")
a = float(a)
b = float(b)
operation=input()
get_result(a, b, operation)
------------------------------------------------------------------------------

def PRINTING(A,B):
    #print(A,B)
    for x,i in enumerate(B[:-1]):
        if i==0:
            continue
        if i >=0 :
            if A[x] == 1:
                print(" + {}x".format(i),end="")
                continue
            if x==0:
                print(" {}x^{}".format(i,A[x]),end="")
            else:    
                print(" + {}x^{}".format(i,A[x]),end="")
            
        elif i<0:
            if A[x] == 1:
                print(" - {}x".format(abs(i)),end="")
                continue
            if x==0: 
              print(" -{}x^{}".format(abs(i),A[x]),end="")
            else:
                print(" - {}x^{}".format(abs(i),A[x]),end="")
    if len(A) == 1:
        if B[-1] >=0 :
           print(" {}".format(B[-1]))
        else:
            print(" -{}".format(B[-1]))
        return
    if B[-1]>0:   
      print(" + {}".format(abs(B[-1]))) 
    else:
        print(" - {}".format(abs(B[-1]))) 

---------------------------------------------------------------
printing ab polynomials


Srinivas Kotipalli <srinivasktpl1222@gmail.com>
Mon, Feb 24, 9:43 PM (10 hours ago)
to me

def PRINTING(A,B):
    #print(A,B)
    for x,i in enumerate(B[:-1]):
        if i==0:
            continue
        if i >=0 :
            if A[x] == 1:
                print(" + {}x".format(i),end="")
                continue
            if x==0:
                print(" {}x^{}".format(i,A[x]),end="")
            else:    
                print(" + {}x^{}".format(i,A[x]),end="")
            
        elif i<0:
            if A[x] == 1:
                print(" - {}x".format(abs(i)),end="")
                continue
            if x==0: 
              print(" -{}x^{}".format(abs(i),A[x]),end="")
            else:
                print(" - {}x^{}".format(abs(i),A[x]),end="")
    if len(A) == 1:
        if B[-1] >=0 :
           print(" {}".format(B[-1]))
        else:
            print(" -{}".format(B[-1]))
        return
    if B[-1]>0:   
      print(" + {}".format(abs(B[-1]))) 
    else:
        print(" - {}".format(abs(B[-1]))) 


-------------------------------------------------------------
multiply

Srinivas Kotipalli <srinivasktpl1222@gmail.com>
Mon, Feb 24, 9:42 PM (10 hours ago)
to me

"""----------MULTIPLICATION----------"""

from collections import defaultdict
def fun():

    coef_A=[]
    po_A=[]
    for i in range(int(input())):
        a,b=list(map(int,input().split()))
        coef_A.append(a)
        po_A.append(b)
    A=list(reversed(list(zip(coef_A,po_A))))
    return A
 
A=fun()
B=fun()
#print(A,B)
mul=[]
coef=[]
#print(A,B)
for i in A:
    for j in B:
        mul.append(i[1]*j[1])
        coef.append(i[0]+j[0])
#print(mul,coef)

d=defaultdict(int)
for i in range(len(coef)):
    d[coef[i]]+=mul[i]

l=sorted(d,reverse=True)
d={i:d[i] for i in l}

z=0
"""---------PRINTING--------"""
for k,v in d.items():
    z+=1
    if k==0:
     if v>0:    
        print(" + {0}".format(v),end="")
     else:
        print(" - {0}".format(abs(v)),end="")
        
    elif v<0:
     print(" - {0}x^{1}".format(abs(v),k),end="")
    elif v>0:
     if z!=1:    
      print(" + {0}x^{1}".format(v,k),end="")
     else:
         print("{0}x^{1}".format(v,k),end="")

===---------------------------------------------
x = int(input())
d={}
k=[]
v=[]

for i in range(x):
    n=input().split(",")
    names=n[0]
    dgs = n[1:]
    dgs=[int(i) for i in dgs]
    d.update({names[0:]:dgs[0:] for i in range(len(dgs))})
d1=sorted(d.items())
d2=sorted(d1,key=lambda v:v[1],reverse=True)
print("+"+"-"*25+"+"+"-"*4+"+"+"-"*4+"+"+"-"*4+"+")
print("| {:<24}".format("Merchant")+"|"+"{:>4}".format("D ")+"|"+"{:>4}".format("G ")+"|"+"{:>4}".format("S ")+"|")
print("+"+"-"*25+"+"+"-"*4+"+"+"-"*4+"+"+"-"*4+"+")
for key,value in d2:
    k.append(key)
    v.append(value)
for i in range(x):
    print("| {:<24}|".format(k[i])+"{:>3} |".format(v[i][0])+"{:>3} |".format(v[i][1])+"{:>3} |".format(v[i][2]))
print("+"+"-"*25+"+"+"-"*4+"+"+"-"*4+"+"+"-"*4+"+")

------------------------------------------------
add two poly
===
dic1 = {}
dic2 = {}
dic3 = {}
dic4 = {}
c=0
n=int(input())
for i in range(n):
    s = input().split()
    dic1.update({int(s[0]):int(s[1])})
m=int(input())
for i in range(m):
    s = input().split()
    dic2.update({int(s[0]):int(s[1])})
for key in dic1:
    if key in dic2:
        #print(key,dic1[key],dic2[key])
        dic2[key]=dic1[key]+dic2[key]
    else:
        #print(key,dic1[key])
        dic2.update({key:dic1[key]})
#print(dic2)
for i in dic2:
    if dic2[i]!=0:
        dic4.update({i:dic2[i]})
dic4=sorted(dic4.items(),key=lambda x:x[0],reverse=True)
#
#print(dic4)
if len(dic4)==0:
    print("0")
else:
    a=[]
    b=[]
    for k,v in dic4:
        a.append("{}x^{}".format(v,k))
        b=(" + ").join(a)
        #print(a)
        #print(b)
        b=b.replace('x^0','')
        b=b.replace('x^1','x')
        b=b.replace('1x','x')
        b=b.replace(' + -',' - ')
    print(b)    
      =============------------==============
      dic1 = {}
dic2 = {}
dic3 = {}
dic4 = {}
c=0
n=int(input())
for i in range(n):
    s = input().split()
    dic1.update({int(s[0]):int(s[1])})
m=int(input())
for i in range(m):
    s = input().split()
    dic2.update({int(s[0]):int(s[1])})
if n>m:
    for key in dic1:
        if key in dic2:
            #print(key,dic1[key],dic2[key])
            dic2[key]=dic1[key]-dic2[key]
        else:
            #print(key,dic1[key])
            dic2.update({key:dic1[key]})
    #print(dic2)
else:
    for key in dic2:
        if key in dic1:
            #print(key,dic1[key],dic2[key])
            dic2[key]=dic1[key]-dic2[key]
        else:
            #print(key,dic1[key])
            dic2.update({key:0-dic2[key]})
    #pri
    
for i in dic2:
    if dic2[i]!=0:
        dic4.update({i:dic2[i]})
dic4=sorted(dic4.items(),key=lambda x:x[0],reverse=True)
#
#print(dic4)
if len(dic4)==0:
    print("0")
else:
    a=[]
    b=[]
    for k,v in dic4:
        a.append("{}x^{}".format(v,k))
        b=(" + ").join(a)
        #print(a)
        #print(b)
        b=b.replace('x^0','')
        b=b.replace('x^1','x')
        b=b.replace(' 1x ',' x ')
        b=b.replace(' 1x^',' x^')
        #b=b.replace('-1x^','-x^')
        b=b.replace(' + -',' - ')
    print(b)

-----------------------
ipl
n=int(input())
d={}
d1={}
for i in range(n):
    s=input().split(";")
    if s[0] not in d:
        d.update({s[0]:[0,0,0,0,0]})
    if s[1] not in d:
        d.update({s[1]:[0,0,0,0,0]})
    print(d)
    k=d[s[0]]
    l=d[s[1]]
    if s[2]=="win":
        k[0]+=1
        k[1]+=1
        k[4]+=3
        l[0]+=1
        l[3]+=1
    elif s[2]=="draw":
        k[0]+=1
        k[2]+=1
        k[4]+=1
        l[0]+=1
        l[2]+=1
        l[4]+=1
    elif s[2]=="loss":
        k[0]+=1
        k[3]+=1
        k[3]+=0
        l[0]+=1
        l[1]+=1
        l[4]+=3
d=sorted(d.items())
d1=sorted(d,key=lambda v:v[1][4] ,reverse=True)
d1=dict(d1)
print("{:<24}| {:>2} | {:>2} | {:>2} | {:>2} | {:>2} |".format('Team','MP','W','D','L','P'))

for j in d1:
    print("{:<24}| {:>2} | {:>2} | {:>2} | {:>2} | {:>2} |".format(j,d1[j][0],d1[j][1],d1[j][2],d1[j][3],d1[j][4]))

------------------------------------------
matam-jayaprakash:~/environment $ cd python_sample_package
matam-jayaprakash:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import my_world
>>> exit()                                                                                              
matam-jayaprakash:~/environment/python_sample_package $ python3 my_world.py
script
matam-jayaprakash:~/environment/python_sample_package $ python3 my_world.py
Hello world
matam-jayaprakash:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import my_world
>>> import my_world

------------------
def print_hello():
	print("Hello world")
	

if __name__=="__main__":
	print_hello()
elif __name__=="__my_world__":
	print("module")
    ----------------------------------

matam-jayaprakash:~/environment $ cd python_sample_package
matam-jayaprakash:~/environment/python_sample_package $ import numbers
bash: import: command not found
matam-jayaprakash:~/environment/python_sample_package $ numbers.py
bash: numbers.py: command not found
matam-jayaprakash:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import numbers
0  2  4  6  8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98  1  3  5  7  9  11  13  15  17  19  21  23  25  27  29  31  33  35  37  39  41  43  45  47  49  51  53  55  57  59  61  63numbers  69  71  73  75  77  79  81  83  85  87  89  91  93  95  97  99  >>> inumbers
<module 'numbers' from '/home/ec2-user/environment/python_sample_package/numbers.py'>
>>> numbers.even(10)
0  2  4  6  8  >>> numbers.odd(10)
1  3  5  7  9  >>> numbers.odd(100)
1  3  5  7  9  11  13  15  17  19  21  23  25  27  29  31  33  35  37  39  41  43  45  47  49  51  53  55  57  59  61  63  65  67  69  71  73  75  77  79  81  83  85  87  89  91  93  95  97  99  >>> numbers.
  File "<stdin>", line 1
    numbers.
           ^
SyntaxError: invalid syntax
>>> numbers.even(10)
0  2  4  6  8  >>> numbers.
numbers.even(  numbers.odd(   
>>> numbers.
numbers.even(  numbers.odd(   
>>> numbers.
numbers.even(  numbers.odd(   
>>> numbers._name_
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'numbers' has no attribute '_name_'
>>> _name_
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name '_name_' is not defined
>>> __name__
'__main__'
>>> numbers.__name__
'numbers'
>>> from numbers import even
>>> 
>>> even(10)
0  2  4  6  8  >>> odd(10)                                                                              
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'odd' is not defined
>>> from numbers import odd
>>> odd(10)
1  3  5  7  9  >>> from numbers import *
>>> odd(10)
1  3  5  7  9  >>> even(10)                                                                             
0  2  4  6  8  >>> import numbers as print_even                                                         
>>> print_even.even(10)
0  2
>>> print_even.odd(10)                                                                                  
1  3 .odd(10) >>> pr.odd(10)                                                                            
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'p' is not defined
>>> numbers.odd(10)
1  3import numbers as print_even                                                                        
>>> numbers.odd(10)
1  3  5  7  9  >>> exit()
matam-jayaprakash:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import numbers as print_even
>>> numbers.odd(10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'numbers' is not defined
>>> exit()
matam-jayaprakash:~/environment/python_sample_package $ python3
Python 3.6.8 (default, Aug  2 2019, 17:42:44) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from numbers import odd as print_odd                                                                
>>> print_odd(10)
>>> print_odd(10)
-------------------

Warning: PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set, see:
    https://github.com/rvm/rvm/issues/3212

matam-jayaprakash:~/environment $ cd python_sample_package
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
echo echo!
revverse sound is here!
None
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
echo echo!
revverse sound is here!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
echo echo!
revverse sound is here!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Traceback (most recent call last):
  File "/usr/lib64/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib64/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ec2-user/environment/python_sample_package/sound/effects/echo.py", line 25, in <module>
    print_echo()
  File "/home/ec2-user/environment/python_sample_package/sound/effects/echo.py", line 19, in print_echo
    from .effects.reverse import reverse_sound
ModuleNotFoundError: No module named 'sound.effects.effects'
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
echo echo!
revverse sound is here!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
echo echo!
revverse sound is here!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
echo echo!
revverse sound is here!
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
filters package is getting imported!
Module equalizer.py has been loaded!
echo echo!
revverse sound is here!
called equilizer func
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
filters package is getting imported!
Module equalizer.py has been loaded!
echo echo!
revverse sound is here !
called equilizer func
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
filters package is getting imported!
Module equalizer.py has been loaded!
echo echo!
revverse sound is here !
called equilizer func
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
Traceback (most recent call last):
  File "/usr/lib64/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib64/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ec2-user/environment/python_sample_package/sound/effects/echo.py", line 27, in <module>
    print_echo()
  File "/home/ec2-user/environment/python_sample_package/sound/effects/echo.py", line 21, in print_echo
    from ..equalizer import print_equa
ModuleNotFoundError: No module named 'sound.equalizer'
matam-jayaprakash:~/environment/python_sample_package $ python3 -m sound.effects.echo
sound package is getting imported!
effects package is getting imported!
Module echo.py has been loaded!
Module reverse.py has been loaded!
filters package is getting imported!
Module equalizer.py has been loaded!
echo echo!
revverse sound is here !
called equilizer func
matam-jayaprakash:~/environment/python_sample_package $ python3 main.py 1 2 2 2 
['main.py', '1', '2', '2', '2']
matam-jayaprakash:~/environment/python_sample_package $ python3 main.py "jai" "Prakash"
['main.py', 'jai', 'Prakash']
matam-jayaprakash:~/environment/python_sample_package $ python3 main.py 1 2 2 2                          
['2', '2', '2']
matam-jayaprakash:~/environment/python_sample_package $ python3 main.py 1 2 2 2 
['1', '2', '2', '2']
['2', '2', '2']
['2', '2']
matam-jayaprakash:~/environment/python_sample_package $ python3 main.py 1 2 2 2 
['main.py', '1', '2', '2', '2']
['1', '2', '2', '2']
['2', '2', '2']
['2', '2']
matam-jayaprakash:~/environment/python_sample_package $ python3 1 2 2 2
python3: can't open file '1': [Errno 2] No such file or directory
matam-jayaprakash:~/environment/python_sample_package $ python3 main.py 1 2 2 2 
['main.py', '1', '2', '2', '2']
['1', '2', '2', '2']
['2', '2', '2']
['2', '2']
matam-jayaprakash:~/environment/python_sample_package $ 
















